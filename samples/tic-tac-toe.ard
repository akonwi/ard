use ard/io
use ard/option

struct Board {
  cells: [Str]
}

impl (b: Board) {
  fn is_full() Bool {
    mut full = true
    for cell in (b.cells) {
      if (cell.is_empty) {
        full = false
        break
      }
    }
    full
  }

  fn draw() {
    io.print("{{b.cells.at(0)}} | {{b.cells.at(1)}} | {{b.cells.at(2)}}")
    io.print("-------")
    io.print("{{b.cells.at(3)}} | {{b.cells.at(4)}} | {{b.cells.at(5)}}")
    io.print("-------")
    io.print("{{b.cells.at(6)}} | {{b.cells.at(7)}} | {{b.cells.at(8)}}")
  }

  fn can_play(pos: Num) Bool {
    match b.cells.at(pos) {
      s => s.is_empty,
      _ => false
    }
  }

  fn play(player: Str, pos: Num) {
    b.cells.set(pos, player)
  }

  fn get_winner() Str {
    mut winner = ""

    if b.cells.at(0) == b.cells.at(1) and b.cells.at(0) == b.cells.at(2) {
      winner = match b.cells.at(0) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(3) == b.cells.at(4) and b.cells.at(3) == b.cells.at(5) {
      winner = match b.cells.at(3) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(6) == b.cells.at(7) and b.cells.at(6) == b.cells.at(8) {
      winner = match b.cells.at(6) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(0) == b.cells.at(3) and b.cells.at(0) == b.cells.at(6) {
      winner = match b.cells.at(0) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(1) == b.cells.at(4) and b.cells.at(1) == b.cells.at(7) {
      winner = match b.cells.at(1) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(2) == b.cells.at(5) and b.cells.at(2) == b.cells.at(8) {
      winner = match b.cells.at(2) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(0) == b.cells.at(4) and b.cells.at(0) == b.cells.at(8) {
      winner = match b.cells.at(0) {
        s => s,
        _ => ""
      }
    } else if b.cells.at(2) == b.cells.at(4) and b.cells.at(2) == b.cells.at(6) {
      winner = match b.cells.at(2) {
        s => s,
        _ => ""
      }
    }

    winner
  }
}

fn read_move(player: Str) Num {
  io.print("Enter a number between 1 and 9")
  io.print("---------------")

  let input = match Num::from_str(io.read_line()) {
    n => n,
    _ => -1
  }
  match input >= 1 and input <= 9 {
    true => input - 1,
    false => -1
  }
}

let board = Board{ cells: ["","","","","","","","",""] }

let players = ["X", "O"]

io.print("Starting Game")
io.print("---------------")

board.draw()

while (board.is_full() == false) {
  for player in players {
    io.print("Player {{player}}: Your move")
    mut move = read_move(player)
    while move < 0 {
      io.print("Invalid move")
      move = read_move(player)
    }
    while (board.can_play(move) == false) {
      io.print("Position already played")
      move = read_move(player)
    }

    board.play(player, move)
    io.print("---------------")
    io.print("Player {{player}} played")
    io.print("---------------")
    board.draw()
    io.print("---------------")

    let winner = board.get_winner()
    if winner.is_empty == false {
      io.print("Player {{winner}} wins!")
      break
    }
  }

  if board.is_full() == true {
    io.print("Game Over! It's a draw")
  }
}
